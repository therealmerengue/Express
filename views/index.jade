extends layout

block content
  #wrapper
    #sidenav-wrapper
        nav.sidenav
            ul.sidenav-list
                li.sidenav-list-item
                    a(href="#d1"): i(class="fa fa-database")
                li.sidenav-list-item
                    a(href="#d2"): i(class="fa fa-user-plus")
                li.sidenav-list-item
                    a(href="#d3"): i(class="fa fa-user-plus")
    #page-content-wrapper
        #d1
            .btn-group-vertical(data-toggle='buttons')
                label.btn.btn-default.disabled
                    input(type='radio', name='options', autocomplete='off', disabled='true')
                    |  Style:
                label.btn.btn-primary.active
                    img(src="images/App.png")
                    input#style(type='radio', name='options', autocomplete='off', checked='')
                    |  App
                label.btn.btn-primary
                    img(src="images/Basic.png")
                    input#basic(type='radio', name='options', autocomplete='off')
                    |  Basic
                label.btn.btn-primary
                    img(src="images/Light.png")
                    input#light(type='radio', name='options', autocomplete='off')
                    |  Light
                label.btn.btn-primary
                    img(src="images/Dark.png")
                    input#dark(type='radio', name='options', autocomplete='off')
                    |  Dark
                label.btn.btn-primary
                    img(src="images/Street.png")
                    input#street(type='radio', name='options', autocomplete='off')
                    |  Street
        #d2
            form(role='form')
                .form-group
                    input#searchinput.form-control(type='search', placeholder='Search...')
                #searchlist.list-group
                    for point in points
                        a.list-group-item.vehicle(href='#')
                            span= point.properties.plate
            script.
                $('#searchlist').btsListFilter('#searchinput', {itemChild: 'span'});
        #d3
        #map

        script(type='text/javascript').
            var map = new mapboxgl.Map({
                container: 'map',
                center: [0, 0],
                zoom: 2.01,
                bearing: 0,
                pitch: 0,
                minZoom: 2,
                style: '/styles/style.json'
            });

            map.addControl(new mapboxgl.NavigationControl({position: 'top-right'}));

            map.on('style.load', function() {
                try {
                    var dbVehiclesArray = !{JSON.stringify(points)};
                    map.addSource('points', {
                        "type": "geojson",
                        "data": {
                            "type": "FeatureCollection",
                            "features": dbVehiclesArray
                        },
                        cluster: true,
                        clusterMaxZoom: 14, // Max zoom to cluster points on
                        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
                    });
                    map.addLayer({
                        "id": "points",
                        "type": "symbol",
                        "source": "points",
                        "filter": ["!has", "point_count"],
                        "layout": {
                            "icon-image": "{icon}-15",
                            "text-field": "{title}",
                            "text-font": ["Open Sans Semibold"],
                            "text-offset": [0, 0.6],
                            "text-anchor": "top"
                        }
                    });

                    //cluster layers - colors depending on count
                    var layers = [
                        [150, '#f28cb1'],
                        [20, '#f1f075'],
                        [0, '#51bbd6']
                    ];

                    //adding clusters
                    layers.forEach(function(layer, i) {
                        map.addLayer({
                            "id": "cluster-" + i,
                            "type": "circle",
                            "source": "points",
                            "paint": {
                                "circle-color": layer[1],
                                "circle-radius": 18
                            },
                            "filter": i === 0 ?
                                    [">=", "point_count", layer[0]] :
                                    ["all",
                                        [">=", "point_count", layer[0]],
                                        ["<", "point_count", layers[i - 1][0]]]
                        });
                    });
                    //cluster labels
                    map.addLayer({
                        "id": "cluster-count",
                        "type": "symbol",
                        "source": "points",
                        "layout": {
                            "text-field": "{point_count}",
                            "text-font": [
                                "Open Sans Semibold"
                            ],
                            "text-size": 12
                        }
                    });
                } catch (error) {}
            });

            map.on('click', function (e) {
                // Use queryRenderedFeatures to get features at a click event's point
                // Use layer option to avoid getting results from other layers
                var pointFeatures = map.queryRenderedFeatures(e.point, {layers: ['points']});
                // if there are features within the given radius of the click event,
                // fly to the location of the click event
                if (pointFeatures.length) {
                    // Get coordinates from the symbol and center the map on those coordinates
                    map.flyTo({center: pointFeatures[0].geometry.coordinates, zoom: 10});

                    var popupDiv = window.document.createElement('div');

                    var content = window.document.createElement('div');
                    content.setAttribute('class', 'content');
                    var span = document.createElement('span');
                    span.setAttribute('class', 'x');
                    span.onclick = function() {
                        span.parentElement.remove();
                        map.flyTo({zoom: map.getZoom() - 3});
                    };
                    span.innerHTML = '&times;';
                    content.appendChild(span);
                    var plateHeader = document.createElement('h2');
                    plateHeader.innerHTML = pointFeatures[0].properties.plate;
                    var speed = document.createElement('h5');
                    speed.innerHTML = 'Speed: ' + pointFeatures[0].properties.speed;
                    var distance = document.createElement('h5');
                    distance.innerHTML = 'Distance: ' + pointFeatures[0].properties.distance;
                    content.appendChild(plateHeader);
                    content.appendChild(speed);
                    content.appendChild(distance);
                    popupDiv.appendChild(content);

                    popupDiv.style.visibility = 'visible';
                    //display pop up with coords
                    var popup = new mapboxgl.Popup()
                            .setLngLat(pointFeatures[0].geometry.coordinates)
                            .setDOMContent(popupDiv)
                            .addTo(map);
                }

                var clusterFeatures = map.queryRenderedFeatures(e.point, {layers: ['cluster-0', 'cluster-1', 'cluster-2']});
                if (clusterFeatures.length) {
                    map.flyTo({
                        center: e.lngLat,
                        zoom: map.getZoom() + 2
                    });
                }
            });


            // Use the same approach as above to indicate that the symbols are clickable
            // by changing the cursor style to 'pointer'.
            map.on('mousemove', function (e) {
                var features = map.queryRenderedFeatures(e.point, {layers: ['points', 'cluster-0', 'cluster-1', 'cluster-2']});
                map.getCanvas().style.cursor = features.length ? 'pointer' : '';
            });

            $.periodic({period: 10000, decay: 1, max_period: 60000}, function() {
                $.ajax({
                    url: '/update',
                    success: function(data) {
                        movePointsAnimated(data);
                    },
                    complete: this.ajax_complete,
                    dataType: 'json'
                });
            });